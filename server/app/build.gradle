/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'application'
}

configurations {
    tests
}

dependencies {
    implementation project(':james-server:james-server-cli')
    implementation project(':james-server:james-server-core')
    implementation project(':james-server:james-server-data-api')
    implementation project(':james-server:james-server-dnsservice-library')
    implementation project(':james-server:james-server-filesystem-api')
    implementation project(':james-server:james-server-lifecycle-api')
    implementation project(':james-server:james-server-mailetcontainer-api')
    implementation project(':james-server:james-server-queue-api')
    implementation project(':james-server:james-server-spring')
    implementation project(':james-server:james-server-task-memory')
    implementation project(':metrics:metrics-api')
    implementation project(':metrics:metrics-dropwizard')
    implementation project(':metrics:metrics-logger')
    implementation project(':protocols:protocols-managesieve')

    implementation project(':apache-james-mailbox:apache-james-mailbox-jpa')
    implementation project(':apache-james-mailbox:apache-james-mailbox-lucene')
    implementation project(':apache-james-mailbox:apache-james-mailbox-memory')
    implementation project(':apache-james-mailbox:apache-james-mailbox-spring')
    implementation project(':james-server:james-server-data-file')
    implementation project(':james-server:james-server-data-jdbc')
    implementation project(':james-server:james-server-data-jpa')
    implementation project(':james-server:james-server-data-ldap')
    implementation project(':james-server:james-server-data-library')
    implementation project(':james-server:james-server-dnsservice-api')
    implementation project(':james-server:james-server-dnsservice-dnsjava')
    implementation project(':james-server:james-server-fetchmail')
    implementation project(':james-server:james-server-mailbox-adapter')
    implementation project(':james-server:james-server-mailetcontainer-camel')
    implementation project(':james-server:james-server-mailet-dkim')
    implementation project(':james-server:james-server-mailets')
    implementation project(':james-server:james-server-protocols-imap4')
    implementation project(':james-server:james-server-protocols-library')
    implementation project(':james-server:james-server-protocols-lmtp')
    implementation project(':james-server:james-server-protocols-managesieve')
    implementation project(':james-server:james-server-protocols-pop3')
    implementation project(':james-server:james-server-protocols-smtp')
    implementation project(':james-server:james-server-queue-activemq')
    implementation project(':james-server:james-server-queue-file')
    implementation project(':james-server:james-server-queue-jms')
    implementation project(':james-server:james-server-util')
    implementation project(':protocols:protocols-imap')

    implementation 'commons-daemon:commons-daemon:1.2.0'
    implementation 'org.apache.camel:camel-core:2.24.1'
    implementation 'org.apache.camel:camel-spring:2.24.1'
    implementation 'org.apache.derby:derby:10.14.2.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.1'
    implementation 'org.apache.xbean:xbean-spring:4.9'
    implementation 'org.slf4j:slf4j-api:1.7.27'
    implementation 'org.slf4j:jcl-over-slf4j:1.7.27'

    implementation 'org.springframework:spring-core:4.3.25.RELEASE'
    implementation 'org.springframework:spring-jdbc:4.3.25.RELEASE'
    implementation 'org.springframework:spring-jms:4.3.25.RELEASE'
    implementation 'org.springframework:spring-orm:4.3.25.RELEASE'
    implementation 'org.springframework:spring-tx:4.3.25.RELEASE'

    testImplementation project(':apache-james-mailbox:apache-james-mailbox-event-memory')
    testImplementation project(':apache-james-mailbox:apache-james-mailbox-store')

    testImplementation 'org.assertj:assertj-core:3.12.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
    testCompileOnly 'junit:junit:4.13'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.5.1'
}

test {
    useJUnitPlatform()
}

description = 'Apache James :: Server :: App'

application {
    mainClass = 'org.apache.james.app.spring.JamesAppSpringMain'
}

distributions {
    main {
        contents {
            from("${projectDir}") {
                include 'README*'
            }
            from("${projectDir}/src/main/licensing/app") {
                include 'notice-for-binary.txt', 'license-for-binary.txt'
                into ''
                setFileMode 0644
                rename { String filename ->
                    if (filename.equalsIgnoreCase('notice-for-binary.txt')) {
                        return 'NOTICE'
                    }
                    if (filename.equalsIgnoreCase('license-for-binary.txt')) {
                        return 'LICENSE'
                    }
                }
            }

            from("${projectDir}/src/main/resources") {
                setFileMode 0600
                into 'conf'
            }
            // create empty dirs
            into('') {
                setDirMode 0755
                File.createTempDir().with { absolutePath ->
                    def tmpLog = new File(absolutePath, 'logs')
                    println tmpLog.absolutePath
                    tmpLog.mkdirs()
                    from(absolutePath) {
                        includeEmptyDirs = true
                    }
                }
            }

            from("${projectDir}/src/main/app/var") {
                into 'var'
            }
        }
    }
}

tasks.register('testsJar', Jar) {
    archiveClassifier = 'tests'
    from(sourceSets.test.output)
}

artifacts {
    tests testsJar
}

publishing.publications.maven.artifact(testsJar)
